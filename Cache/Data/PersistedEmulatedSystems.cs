/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

using System;
using System.Collections.Generic;
using System.Text;
using Thrift.Protocol;

namespace CleanEmulatorFrontend.Cache.Thrift.Data
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class PersistedEmulatedSystems : TBase
  {
    private int _version;
    private List<EmulatedSystem> _emulatedSystemsData;

    public int Version
    {
      get
      {
        return _version;
      }
      set
      {
        __isset.version = true;
        this._version = value;
      }
    }

    public List<EmulatedSystem> EmulatedSystemsData
    {
      get
      {
        return _emulatedSystemsData;
      }
      set
      {
        __isset.emulatedSystemsData = true;
        this._emulatedSystemsData = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool version;
      public bool emulatedSystemsData;
    }

    public PersistedEmulatedSystems() {
      this._version = 100;
      this.__isset.version = true;
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              Version = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                EmulatedSystemsData = new List<EmulatedSystem>();
                TList _list0 = iprot.ReadListBegin();
                for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                {
                  EmulatedSystem _elem2;
                  _elem2 = new EmulatedSystem();
                  _elem2.Read(iprot);
                  EmulatedSystemsData.Add(_elem2);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("PersistedEmulatedSystems");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.version) {
        field.Name = "version";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Version);
        oprot.WriteFieldEnd();
      }
      if (EmulatedSystemsData != null && __isset.emulatedSystemsData) {
        field.Name = "emulatedSystemsData";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, EmulatedSystemsData.Count));
          foreach (EmulatedSystem _iter3 in EmulatedSystemsData)
          {
            _iter3.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("PersistedEmulatedSystems(");
      bool __first = true;
      if (__isset.version) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Version: ");
        __sb.Append(Version);
      }
      if (EmulatedSystemsData != null && __isset.emulatedSystemsData) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("EmulatedSystemsData: ");
        __sb.Append(EmulatedSystemsData);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
